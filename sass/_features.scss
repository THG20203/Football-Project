.features {
  /* features go from center-start to center-end - beginning to end of centre 8 grid */
  grid-column: center-start / center-end;
  margin: 5rem 0;
  /* making features grid item a grid container */
  display: grid;
  /* making columns for this 'sub grid'. */
  // auto-fit - CSS add as many tracks as fit in the container, 25rem (or 250px) minimum size column has to have
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
  grid-gap: 6rem;
  /* align text to be at the top of the boxes within the grid */
  align-items: start;
  /* large being 87.5em - 1400px */
  @media only screen and (max-width: $bp-largest) {
    margin: 5rem 0;
    grid-row: 7 / 8;
  }
}

.feature {
  /* Need to make the feature elements themselves individual grids */
  display: grid;
  // first column contain the icon (width of icon = 4.5rem) - so min-content.
  // why min-content and not 4.5rem? If we change size of icon,
  // automatically the width of column would change. Second column occupy the rest - hence 1fr
  grid-template-columns: min-content 1fr;
  grid-row-gap: 1.5rem;
  grid-column-gap: 2.5rem;
  //Again, no need to define rows - just columns

  &__icon {
    width: 4.5rem;
    height: 4.5rem;
    // -1 only works with an explicit grid, but we didn't define grid rows so have to do span 2
    // span 2 makes the icon span the first row and the second.
    // This means the main body of text will shift to the bottom right
    grid-row: 1 / span 2;
    // move the icon up a bit
    transform: translateY(-1rem);
  }

  &__text {
    font-size: 1.7rem;
  }
}
